h1{
   color : red; 
}


  <!-- PDF Viewer Container -->
  <div id="pdf-viewer-container" style="width: 100%; margin: 20px 0; border: 1px solid #ddd; border-radius: 8px; overflow: hidden;">
    <!-- Toolbar -->
    <div id="pdf-toolbar" style="background: #f5f5f5; padding: 10px; display: flex; gap: 10px; align-items: center;">
      <button id="prev-page" class="pdf-button" disabled>
        <i class="fas fa-chevron-left"></i>
      </button>
      <span id="page-num">Page: <span id="current-page">1</span> / <span id="total-pages">0</span></span>
      <button id="next-page" class="pdf-button">
        <i class="fas fa-chevron-right"></i>
      </button>
      <div style="margin-left: auto; display: flex; gap: 10px;">
        <button id="zoom-out" class="pdf-button">
          <i class="fas fa-search-minus"></i>
        </button>
        <span id="zoom-level">100%</span>
        <button id="zoom-in" class="pdf-button">
          <i class="fas fa-search-plus"></i>
        </button>
      </div>
    </div>
    
    <!-- Viewer Canvas -->
    <div id="pdf-viewer" style="width: 100%; overflow: auto; background: #525659; text-align: center;">
      <canvas id="pdf-canvas" style="margin: 20px 0; box-shadow: 0 0 10px rgba(0,0,0,0.5);"></canvas>
    </div>
  </div>
</div>

<!-- PDF.js Implementation -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>
<script>
  // Set worker path
  pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.worker.min.js';
  
  // PDF variables
  let pdfDoc = null,
      pageNum = 1,
      pageRendering = false,
      pageNumPending = null,
      scale = 1.0,
      canvas = document.getElementById('pdf-canvas'),
      ctx = canvas.getContext('2d');
  
  // Load the PDF
  pdfjsLib.getDocument("{{ magazine.pdf_file.url }}").promise.then(function(pdf) {
    pdfDoc = pdf;
    document.getElementById('total-pages').textContent = pdf.numPages;
    
    // Initial page render
    renderPage(pageNum);
  });

  // Page rendering function
  function renderPage(num) {
    pageRendering = true;
    pdfDoc.getPage(num).then(function(page) {
      const viewport = page.getViewport({ scale: scale });
      canvas.height = viewport.height;
      canvas.width = viewport.width;
      
      const renderContext = {
        canvasContext: ctx,
        viewport: viewport
      };
      
      const renderTask = page.render(renderContext);
      
      renderTask.promise.then(function() {
        pageRendering = false;
        document.getElementById('current-page').textContent = num;
        
        // Enable/disable buttons
        document.getElementById('prev-page').disabled = num <= 1;
        document.getElementById('next-page').disabled = num >= pdfDoc.numPages;
        
        if (pageNumPending !== null) {
          renderPage(pageNumPending);
          pageNumPending = null;
        }
      });
    });
  }
  
  // Queue page rendering
  function queueRenderPage(num) {
    if (pageRendering) {
      pageNumPending = num;
    } else {
      renderPage(num);
    }
  }
  
  // Button event handlers
  document.getElementById('prev-page').addEventListener('click', function() {
    if (pageNum <= 1) return;
    pageNum--;
    queueRenderPage(pageNum);
  });
  
  document.getElementById('next-page').addEventListener('click', function() {
    if (pageNum >= pdfDoc.numPages) return;
    pageNum++;
    queueRenderPage(pageNum);
  });
  
  // Zoom controls
  document.getElementById('zoom-in').addEventListener('click', function() {
    if (scale >= 3.0) return;
    scale += 0.25;
    document.getElementById('zoom-level').textContent = Math.round(scale * 100) + '%';
    queueRenderPage(pageNum);
  });
  
  document.getElementById('zoom-out').addEventListener('click', function() {
    if (scale <= 0.5) return;
    scale -= 0.25;
    document.getElementById('zoom-level').textContent = Math.round(scale * 100) + '%';
    queueRenderPage(pageNum);
  });
</script>




p -->
            <div class="popup-overlay" id="popupOverlay">
                <div class="popup">
                <button class="close-btn" onclick="closePopup()">Ã—</button>
                <h2>To read this magazine, enter your Gmail</h2>
                <div class="error-message" id="emailError">Please enter a valid Gmail address</div>
                <form method="POST" onsubmit="return validateEmail()">
                    {% csrf_token %}
                    <input type="email" id="emailInput" name="email" placeholder="Enter your Gmail" required>
                    <button type="submit">Read Now</button>
                </form>
                </div>